// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String      @id @default(cuid())
  name        String
  email       String      @unique
  password    String
  avatar      String      @default("")
  description String      @default("")
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")
  role        Role        @default(USER)
  articles    Article[]
  comments    Comment[]
  favorites   Favorite[]
  following   Following[]

  @@map("user")
}

model Article {
  id               String       @id @default(cuid())
  userId           String       @map("user_id")
  title            String
  slug             String
  shortDescription String       @map("short_description")
  description      String
  totalLike        Int          @default(0) @map("total_like")
  active           Boolean      @default(true)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @updatedAt @map("updated_at")
  user             User         @relation(fields: [userId], references: [id])
  comments         Comment[]
  articleTag       ArticleTag[]
  favorites        Favorite[]

  @@map("article")
}

model ArticleTag {
  id        String   @id @default(cuid())
  articleId String   @map("article_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  article   Article  @relation(fields: [articleId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@map("article_tag")
}

model Tag {
  id         String       @id @default(cuid())
  title      String       @unique
  active     Boolean      @default(true)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @updatedAt @map("updated_at")
  articleTag ArticleTag[]

  @@map("tag")
}

model Comment {
  id        String   @id @default(cuid())
  articleId String   @map("article_id")
  userId    String   @map("user_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comment")
}

model Favorite {
  id        String   @id @default(cuid())
  articleId String   @map("article_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  article   Article  @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("favorite")
}

model Following {
  id         String   @id @default(cuid())
  followerId String   @map("follower_id")
  userId     String   @map("user_id")
  createdAt  DateTime @default(now()) @map("created_at")
  user       User     @relation(fields: [userId], references: [id])

  @@map("following")
}
